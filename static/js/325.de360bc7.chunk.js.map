{"version":3,"file":"static/js/325.de360bc7.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAS,mCAEFC,EAAW,mCAAG,sGACPF,EAAAA,GAAAA,IAAA,sCAAyCC,IADlC,cACnBE,EADmB,gBAEFA,EAAIC,KAAKC,QAFP,cAEnBC,EAFmB,yBAGlBA,GAHkB,2CAAH,qDAMXC,EAAY,mCAAG,WAAOC,EAAOC,GAAd,yFACRT,EAAAA,GAAAA,IAAA,gCAAmCC,EAAnC,iBAAkDQ,EAAlD,8BAA4ED,IADpE,cACpBL,EADoB,gBAENA,EAAIC,KAAKC,QAFH,cAEpBK,EAFoB,yBAGnBA,GAHmB,2CAAH,wDAMZC,EAAU,mCAAG,WAAMC,GAAN,yFACNZ,EAAAA,GAAAA,IAAA,iBAAoBY,EAApB,oBAAuCX,IADjC,cAClBE,EADkB,gBAEFA,EAAIC,KAFF,cAElBS,EAFkB,yBAGjBA,GAHiB,2CAAH,sDAMVC,EAAU,mCAAG,WAAMF,GAAN,yFACNZ,EAAAA,GAAAA,IAAA,iBAAoBY,EAApB,4BAA+CX,EAA/C,oBADM,cAClBE,EADkB,gBAEFA,EAAIC,KAFF,cAElBW,EAFkB,yBAGjBA,GAHiB,2CAAH,sDAOVC,EAAU,mCAAG,WAAMJ,GAAN,yFACNZ,EAAAA,GAAAA,IAAA,iBAAoBY,EAApB,4BAA+CX,IADzC,cAClBE,EADkB,gBAEFA,EAAIC,KAFF,cAElBa,EAFkB,yBAGjBA,GAHiB,2CAAH,qD,iKCYvB,EAvCmB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACnB,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAeA,OACE,0BACE,kBAAMH,SAXa,SAAAI,GAEjB,GADAA,EAAMC,iBACmB,KAArBH,EAAUI,OACV,OAAOC,MAAM,wBAEjBP,EAASE,GACTC,EAAa,GAChB,EAIC,WACE,kBACEK,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,WAAS,EACTC,YAAY,kBACZC,MAAOX,EACPY,SAvBe,SAAAV,GACjBD,EAAaC,EAAMW,cAAcF,MAAMG,cAC1C,KAuBG,mBAAQR,KAAK,SAAb,wBAIP,EC8BD,EA3De,WACb,OAA8BP,EAAAA,EAAAA,WAAS,GAAvC,eAAOgB,EAAP,KAAgBC,EAAhB,KACA,GAA0BjB,EAAAA,EAAAA,UAAS,IAAnC,eAAOT,EAAP,KAAc2B,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAcJ,EAAaK,IAAI,YALlB,SAOJC,EAPI,0EAOnB,WAA2BrC,GAA3B,0EACOA,EADP,uBAEIsC,QAAQC,IAAI,qBAFhB,iCAKEX,GAAW,GALb,mBAOwB7B,EAAAA,EAAAA,IAAaC,GAPrC,UAQyB,KADfE,EAPV,QAQcsC,OARd,wBASMvB,MAAM,yBATZ,2BAYIY,EAAS3B,GAZb,kDAcIe,MAAM,0CAdV,yBAgBIW,GAAW,GAhBf,8EAPmB,sBAsCnB,OANAa,EAAAA,EAAAA,YAAU,WACJN,GACFE,EAAYF,EAEf,GAAE,CAACA,KAGF,4BACE,SAAC,EAAD,CAAYzB,SAbG,SAACV,GAClBgC,EAAgB,CAAEU,SAAU1C,IAC5BqC,EAAYrC,EACb,IAWI2B,IAAW,SAACgB,EAAA,EAAD,IACXzC,IACC,wBACGA,EAAM0C,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMhB,GAA1C,SACGa,KAFID,EADA,QAWpB,C","sources":["Api/requests.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst MY_KEY = '38a870c0e4485eebd742c83e630c16d3';\n\nexport const getTrending = async () => {\n  const res = await axios.get(`/trending/movie/day?api_key=${MY_KEY}`);\n  const trending = await res.data.results;\n  return trending;\n};\n\nexport const searchMovies = async (query, page) => {\n  const res = await axios.get(`/search/movie?api_key=${MY_KEY}&page=${page}&language=en&query=${query}`);\n  const movie = await res.data.results;\n  return movie;\n};\n\nexport const getDetails = async idMovie => {\n  const res = await axios.get(`/movie/${idMovie}?api_key=${MY_KEY}`);\n  const details = await res.data;\n  return details;\n};\n\nexport const getCredits = async idMovie => {\n  const res = await axios.get(`/movie/${idMovie}/credits?api_key=${MY_KEY}&language=en-US`);\n  const credits = await res.data;\n  return credits;\n};\n\n\nexport const getReviews = async idMovie => {\n  const res = await axios.get(`/movie/${idMovie}/reviews?api_key=${MY_KEY}`);\n  const reviews = await res.data;\n  return reviews;\n};\n \n\n\n\n","import { useState } from 'react';\n// import { PropTypes } from 'prop-types';\n\nconst SearchForm = ({onSubmit}) => {\n  const [movieName, setMovieName] = useState('');\n\n    const handleChange = event => {\n        setMovieName(event.currentTarget.value.toLowerCase());\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        if (movieName.trim() === '') {\n            return alert('Your search is empty');\n        }\n        onSubmit(movieName);\n        setMovieName('');\n    };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter your film\"\n          value={movieName}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n};\n\n// SearchForm.propTypes = {\n//   searchForm: PropTypes.func.isRequired\n// };\n\n\nexport default SearchForm;\n","import { useState, useEffect } from 'react';\nimport { searchMovies } from 'Api/requests';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport Loader from 'components/Loader';\nimport SearchForm from 'components/SearchForm';\n\nconst Movies = () => {\n  const [loading, setLoading] = useState(false);\n  const [movie, setMovie] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const currentName = searchParams.get('findFilm');\n\n  async function searchFilms(query) {\n    if (!query) {\n      console.log('Opps, bad request');\n      return;\n    }\n    setLoading(true);\n    try {\n      const movie = await searchMovies(query);\n      if (movie.length === 0) {\n        alert('Sorry, film not found');\n        return;\n      }\n      setMovie(movie);\n    } catch (error) {\n      alert('Sorry, film not found... :-( try again');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const searchForm = (query) => {\n    setSearchParams({ findFilm: query });\n    searchFilms(query);\n  };\n\n  useEffect(() => {\n    if (currentName) {\n      searchFilms(currentName);\n    }\n  }, [currentName]);\n\n  return (\n    <div>\n      <SearchForm onSubmit={searchForm} />\n      {loading && <Loader />}\n      {movie && (\n        <ul>\n          {movie.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\n\n\nexport default Movies;"],"names":["axios","MY_KEY","getTrending","res","data","results","trending","searchMovies","query","page","movie","getDetails","idMovie","details","getCredits","credits","getReviews","reviews","onSubmit","useState","movieName","setMovieName","event","preventDefault","trim","alert","type","name","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","loading","setLoading","setMovie","useSearchParams","searchParams","setSearchParams","location","useLocation","currentName","get","searchFilms","console","log","length","useEffect","findFilm","Loader","map","id","title","to","state","from"],"sourceRoot":""}