{"version":3,"file":"static/js/104.d1bfb56d.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAS,mCAEFC,EAAW,mCAAG,sGACPF,EAAAA,GAAAA,IAAA,sCAAyCC,IADlC,cACnBE,EADmB,gBAEFA,EAAIC,KAAKC,QAFP,cAEnBC,EAFmB,yBAGlBA,GAHkB,2CAAH,qDAMXC,EAAY,mCAAG,WAAOC,EAAOC,GAAd,yFACRT,EAAAA,GAAAA,IAAA,gCAAmCC,EAAnC,iBAAkDQ,EAAlD,8BAA4ED,IADpE,cACpBL,EADoB,gBAENA,EAAIC,KAAKC,QAFH,cAEpBK,EAFoB,yBAGnBA,GAHmB,2CAAH,wDAMZC,EAAU,mCAAG,WAAMC,GAAN,yFACNZ,EAAAA,GAAAA,IAAA,iBAAoBY,EAApB,oBAAuCX,IADjC,cAClBE,EADkB,gBAEFA,EAAIC,KAFF,cAElBS,EAFkB,yBAGjBA,GAHiB,2CAAH,sDAMVC,EAAU,mCAAG,WAAMF,GAAN,yFACNZ,EAAAA,GAAAA,IAAA,iBAAoBY,EAApB,4BAA+CX,EAA/C,oBADM,cAClBE,EADkB,gBAEFA,EAAIC,KAFF,cAElBW,EAFkB,yBAGjBA,GAHiB,2CAAH,sDAOVC,EAAU,mCAAG,WAAMJ,GAAN,yFACNZ,EAAAA,GAAAA,IAAA,iBAAoBY,EAApB,4BAA+CX,IADzC,cAClBE,EADkB,gBAEFA,EAAIC,KAFF,cAElBa,EAFkB,yBAGjBA,GAHiB,2CAAH,qD,wKC5BVC,EAAWC,EAAAA,GAAAA,GAAH,+VAgBRC,EAAWD,EAAAA,GAAAA,GAAH,4IAQRE,EAAUF,EAAAA,GAAAA,IAAH,gIAQPG,EAAWH,EAAAA,GAAAA,EAAH,6G,SCgBrB,EA1Ca,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEuBd,EAAAA,EAAAA,IAAWS,GAFlC,OAEUG,EAFV,OAGIC,EAAQD,GAHZ,gDAKIG,MAAM,yBALV,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACP,IAIJ,OACE,yBACGG,IACC,SAACR,EAAD,UACGQ,EAAKA,KAAKK,OAAS,EAClBL,EAAKA,KAAKM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACZ,UAAChB,EAAD,YACE,SAACC,EAAD,CACEgB,IAAKH,EAVT,kCAUiCA,EAAeI,EAC5CC,IAAKJ,KAEP,SAACb,EAAD,UAAWa,KACX,uCAAeC,GAAwB,yBAN1BH,EADH,KAWd,oDAMX,C,+pLChDc,SAASO,EAAuBC,EAASC,GAItD,OAHKA,IACHA,EAAMD,EAAQE,MAAM,IAEfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHK,MAAOH,OAAOC,OAAOH,MAG3B,C","sources":["Api/requests.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst MY_KEY = '38a870c0e4485eebd742c83e630c16d3';\n\nexport const getTrending = async () => {\n  const res = await axios.get(`/trending/movie/day?api_key=${MY_KEY}`);\n  const trending = await res.data.results;\n  return trending;\n};\n\nexport const searchMovies = async (query, page) => {\n  const res = await axios.get(`/search/movie?api_key=${MY_KEY}&page=${page}&language=en&query=${query}`);\n  const movie = await res.data.results;\n  return movie;\n};\n\nexport const getDetails = async idMovie => {\n  const res = await axios.get(`/movie/${idMovie}?api_key=${MY_KEY}`);\n  const details = await res.data;\n  return details;\n};\n\nexport const getCredits = async idMovie => {\n  const res = await axios.get(`/movie/${idMovie}/credits?api_key=${MY_KEY}&language=en-US`);\n  const credits = await res.data;\n  return credits;\n};\n\n\nexport const getReviews = async idMovie => {\n  const res = await axios.get(`/movie/${idMovie}/reviews?api_key=${MY_KEY}`);\n  const reviews = await res.data;\n  return reviews;\n};\n \n\n\n\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  justify-items: center;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(150px, 2fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;    \n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center;\n  padding: 15px;\n`;\n\nexport const CastItem = styled.li`\n  border: 1px solid yellow;\n  width:100px;\n  border-radius: 20px;\n  background-color: aqua;  \n  padding: 10px;\n`;\n\nexport const CastImg = styled.img`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100px;\n  height: 150px;\n  margin-bottom: 15px;\n`;\n\nexport const CastText = styled.p`\n  margin-bottom: 10px;\n  font-size: medium;\n  font-weight: bold;\n  color: black;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getCredits } from 'Api/requests';\n\nimport defaultIm from './default.jpg';\nimport { CastList, CastItem, CastImg, CastText } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    async function fetchCast() {\n      try {\n        const cast = await getCredits(movieId);\n        setCast(cast);\n      } catch (error) {\n        alert('Sorry, cast not found');\n      }\n    }\n    fetchCast();\n  }, [movieId]);\n\n  const poster = `https://image.tmdb.org/t/p/w200`;\n\n  return (\n    <div>\n      {cast && (\n        <CastList>\n          {cast.cast.length > 0 ? (\n            cast.cast.map(({ id, profile_path, name, character }) => (\n              <CastItem key={id}>\n                <CastImg\n                  src={profile_path ? poster + profile_path : defaultIm}\n                  alt={name}\n                />\n                <CastText>{name}</CastText>\n                <p>Character: {character ? character : 'Without character'}</p>\n              </CastItem>\n            ))\n          ) : (\n            <p>Information not found</p>\n          )}\n        </CastList>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["axios","MY_KEY","getTrending","res","data","results","trending","searchMovies","query","page","movie","getDetails","idMovie","details","getCredits","credits","getReviews","reviews","CastList","styled","CastItem","CastImg","CastText","movieId","useParams","useState","cast","setCast","useEffect","alert","fetchCast","length","map","id","profile_path","name","character","src","defaultIm","alt","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value"],"sourceRoot":""}